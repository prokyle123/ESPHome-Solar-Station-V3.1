esphome:
  name: solarstation
  platform: ESP8266
  board: d1

  
    
  on_boot:
    priority: -10
    then:
      - script.execute: set_initial_light_state
      
script:
  - id: set_initial_light_state
    then:
      - light.turn_on:
          id: Solar_Station_Indicator_Light
          brightness: 18%
          effect: "Battery charge Status"


wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: "Solarstation Fallback Hotspot"
    password: "pv36ee7dnS5q"
  fast_connect: true
  power_save_mode: HIGH
  reboot_timeout: 15min

captive_portal:

logger:
  level: DEBUG

api:
  reboot_timeout: 15min

ota:
  password: "7c815d24be0121ab0b77d95a6ab83ebe"
  safe_mode: true

uart:
  - id: uart_bus
    tx_pin: D2
    rx_pin: D1
    baud_rate: 9600

dallas:
  - id: dallas_bus
    pin: D5
    update_interval: 5min


sensor:
  - platform: dht
    model: DHT22
    pin: D4
    temperature:
      name: "Solar Station Temperature"
      id: solar_station_temperature
    humidity:
      name: "Solar Station Humidity"
      id: solar_station_humidity
    update_interval: 5min

  - platform: dallas
    id: solar_station_battery_temperature
    dallas_id: dallas_bus
    index: 0
    name: "Solar Station Battery Temperature"
    

  - platform: adc
    pin: A0
    name: "Wind Speed"
    id: wind_speed
    update_interval: 10s  # Update interval can be adjusted as needed
    unit_of_measurement: 'mph'
    filters:
      - lambda: |-
          // Convert the ADC value (0-1.0) to the original voltage (0-5V)
          float voltage = x * 5.0 / 3.3;
          // Adjust for potential offset and noise filtering
          if (voltage < 0.1) {
            return 0.0;
          }
          float wind_speed_mps = (voltage / 5.0) * 32.4;  // Convert voltage to wind speed in m/s
          float wind_speed_mph = wind_speed_mps * 2.23694; // Convert m/s to mph
          if (wind_speed_mph < 0.1) {
            return 0.0;
          }
          return wind_speed_mph;





  - platform: wifi_signal
    name: "Solar Station WiFi Signal Strength"
    update_interval: 360min

  - platform: uptime
    name: "Solar Station Uptime"
    update_interval: 360min

  - platform: template
    name: "Battery Remaining Percentage"
    id: battery_remaining_percentage
    unit_of_measurement: "%"
    lambda: |-
      float voltage = id(battery_bus_voltage).state;  // Get the battery voltage
      float min_voltage = 3.2;  // Minimum voltage (considered empty)
      float max_voltage = 4.2;  // Maximum voltage (considered full)
      float percentage = (voltage - min_voltage) * 100.0 / (max_voltage - min_voltage);  // Compute battery percentage
      if (percentage > 100.0) {
        return 100.0;  // Ensure the value does not exceed 100%
      } else if (percentage < 0.0) {
        return 0.0;  // Ensure the value does not go below 0%
      } else {
        return percentage;
      }
    update_interval: 5min
    
  - platform: template
    name: "Battery Usage Last 6 hours"
    id: battery_usage_last_24_hours
    unit_of_measurement: "%"
    accuracy_decimals: 1
    update_interval: 6h
    lambda: |-
      static float last_percentage = id(battery_remaining_percentage).state;
      float current_percentage = id(battery_remaining_percentage).state;
      float usage = last_percentage - current_percentage;
      if (usage < 0) {
        usage = 0;
      }
      last_percentage = current_percentage;
      return usage;



  - platform: template
    name: "Storm Prediction Chance"
    id: storm_prediction
    unit_of_measurement: "%"
    accuracy_decimals: 1
    update_interval: 5min
    lambda: |-
      static float previous_temp = id(solar_station_temperature).state;
      static float previous_humidity = id(solar_station_humidity).state;
      static float previous_solar_output = id(solar_panel_power_output_percentage).state;
      static float previous_wind_speed = id(wind_speed).state;

      float current_temp = id(solar_station_temperature).state;
      float current_humidity = id(solar_station_humidity).state;
      float current_solar_output = id(solar_panel_power_output_percentage).state;
      float current_wind_speed = id(wind_speed).state;

      const float temp_drop_threshold = 1.0;
      const float humidity_increase_threshold = 2.0;
      const float solar_output_drop_threshold = 5.0;
      const float wind_speed_increase_threshold = 10.0; // Example threshold for wind speed increase

      bool significant_temp_drop = (previous_temp - current_temp) >= temp_drop_threshold;
      bool moderate_temp_drop = (previous_temp - current_temp) >= (temp_drop_threshold / 2.0);
      bool slight_temp_drop = (previous_temp - current_temp) >= (temp_drop_threshold / 4.0);

      bool significant_humidity_increase = (current_humidity - previous_humidity) >= humidity_increase_threshold;
      bool moderate_humidity_increase = (current_humidity - previous_humidity) >= (humidity_increase_threshold / 2.0);
      bool slight_humidity_increase = (current_humidity - previous_humidity) >= (humidity_increase_threshold / 4.0);

      bool significant_solar_output_drop = (previous_solar_output - current_solar_output) >= solar_output_drop_threshold;
      bool moderate_solar_output_drop = (previous_solar_output - current_solar_output) >= (solar_output_drop_threshold / 2.0);
      bool slight_solar_output_drop = (previous_solar_output - current_solar_output) >= (solar_output_drop_threshold / 4.0);

      bool significant_wind_speed_increase = (current_wind_speed - previous_wind_speed) >= wind_speed_increase_threshold;
      bool moderate_wind_speed_increase = (current_wind_speed - previous_wind_speed) >= (wind_speed_increase_threshold / 2.0);
      bool slight_wind_speed_increase = (current_wind_speed - previous_wind_speed) >= (wind_speed_increase_threshold / 4.0);

      float storm_chance = 0.0;

      if (significant_temp_drop) {
        storm_chance += 30.0;
      } else if (moderate_temp_drop) {
        storm_chance += 20.0;
      } else if (slight_temp_drop) {
        storm_chance += 10.0;
      }

      if (significant_humidity_increase) {
        storm_chance += 25.0;
      } else if (moderate_humidity_increase) {
        storm_chance += 15.0;
      } else if (slight_humidity_increase) {
        storm_chance += 5.0;
      }

      if (significant_solar_output_drop) {
        storm_chance += 20.0;
      } else if (moderate_solar_output_drop) {
        storm_chance += 10.0;
      } else if (slight_solar_output_drop) {
        storm_chance += 5.0;
      }

      if (significant_wind_speed_increase) {
        storm_chance += 20.0;
      } else if (moderate_wind_speed_increase) {
        storm_chance += 10.0;
      } else if (slight_wind_speed_increase) {
        storm_chance += 5.0;
      }

      storm_chance = fmaxf(0.0f, fminf(100.0f, storm_chance));

      previous_temp = current_temp;
      previous_humidity = current_humidity;
      previous_solar_output = current_solar_output;
      previous_wind_speed = current_wind_speed;

      return storm_chance;

  - platform: template
    name: "Storm Prediction Detail"
    id: storm_prediction_detail
    unit_of_measurement: "%"
    accuracy_decimals: 1
    update_interval: 5min
    lambda: |-
      static float previous_temp = id(solar_station_temperature).state;
      static float previous_humidity = id(solar_station_humidity).state;
      static float previous_solar_output = id(solar_panel_power_output_percentage).state;
      static float previous_wind_speed = id(wind_speed).state;

      float current_temp = id(solar_station_temperature).state;
      float current_humidity = id(solar_station_humidity).state;
      float current_solar_output = id(solar_panel_power_output_percentage).state;
      float current_wind_speed = id(wind_speed).state;

      const float temp_drop_threshold = 1.0;
      const float humidity_increase_threshold = 2.0;
      const float solar_output_drop_threshold = 5.0;
      const float wind_speed_increase_threshold = 10.0; // Example threshold for wind speed increase

      bool significant_temp_drop = (previous_temp - current_temp) >= temp_drop_threshold;
      bool moderate_temp_drop = (previous_temp - current_temp) >= (temp_drop_threshold / 2.0);
      bool slight_temp_drop = (previous_temp - current_temp) >= (temp_drop_threshold / 4.0);

      bool significant_humidity_increase = (current_humidity - previous_humidity) >= humidity_increase_threshold;
      bool moderate_humidity_increase = (current_humidity - previous_humidity) >= (humidity_increase_threshold / 2.0);
      bool slight_humidity_increase = (current_humidity - previous_humidity) >= (humidity_increase_threshold / 4.0);

      bool significant_solar_output_drop = (previous_solar_output - current_solar_output) >= solar_output_drop_threshold;
      bool moderate_solar_output_drop = (previous_solar_output - current_solar_output) >= (solar_output_drop_threshold / 2.0);
      bool slight_solar_output_drop = (previous_solar_output - current_solar_output) >= (solar_output_drop_threshold / 4.0);

      bool significant_wind_speed_increase = (current_wind_speed - previous_wind_speed) >= wind_speed_increase_threshold;
      bool moderate_wind_speed_increase = (current_wind_speed - previous_wind_speed) >= (wind_speed_increase_threshold / 2.0);
      bool slight_wind_speed_increase = (current_wind_speed - previous_wind_speed) >= (wind_speed_increase_threshold / 4.0);

      float temp_weight = 0.0;
      if (significant_temp_drop) {
        temp_weight = 30.0;
      } else if (moderate_temp_drop) {
        temp_weight = 20.0;
      } else if (slight_temp_drop) {
        temp_weight = 10.0;
      }

      float humidity_weight = 0.0;
      if (significant_humidity_increase) {
        humidity_weight = 25.0;
      } else if (moderate_humidity_increase) {
        humidity_weight = 15.0;
      } else if (slight_humidity_increase) {
        humidity_weight = 5.0;
      }

      float solar_weight = 0.0;
      if (significant_solar_output_drop) {
        solar_weight = 20.0;
      } else if (moderate_solar_output_drop) {
        solar_weight = 10.0;
      } else if (slight_solar_output_drop) {
        solar_weight = 5.0;
      }

      float wind_weight = 0.0;
      if (significant_wind_speed_increase) {
        wind_weight = 20.0;
      } else if (moderate_wind_speed_increase) {
        wind_weight = 10.0;
      } else if (slight_wind_speed_increase) {
        wind_weight = 5.0;
      }

      previous_temp = current_temp;
      previous_humidity = current_humidity;
      previous_solar_output = current_solar_output;
      previous_wind_speed = current_wind_speed;

      return temp_weight + humidity_weight + solar_weight + wind_weight;






 
  - platform: template
    name: "Battery Health Percent"
    id: battery_health_percent
    lambda: |-
       float voltage = id(battery_bus_voltage).state;
       float temp = id(solar_station_battery_temperature).state;

       // Normalize voltage from 0% at 2.5V to 100% at 4.2V
       float normalized_voltage = (voltage - 2.5f) / (4.2f - 2.5f);

       // Convert normalized voltage to a percentage
       float health_percent = normalized_voltage * 100.0f;

       // Adjust health percentage based on temperature
       if (temp < -20.0f || temp > 70.0f) {
       health_percent *= 0.9f; // Reduce health score by 10% for extreme temperatures
       }

       // Ensure health percentage is clamped between 0 and 100
       health_percent = max(0.0f, min(100.0f, health_percent));

       return health_percent;

    update_interval: 3min
    icon: "mdi:battery-charging"
    unit_of_measurement: '%'



  

  - platform: template
    name: "Solar Panel Efficiency"
    id: solar_panel_efficiency
    lambda: |-
       float power = id(station_power).state;
       float current = id(station_current).state;
       float bus_voltage = id(station_bus_voltage).state;

       // Check both power is greater than 1W and bus_voltage * current is not zero to prevent division by zero
       if (power > 1.0 && bus_voltage * current > 0.0) {
       float theoretical_power = bus_voltage * current;
       float efficiency = (power / theoretical_power) * 100.0;
       return efficiency;
       }
       return {};  // Return nullopt when conditions for calculation are not met

    update_interval: 5min
    unit_of_measurement: "%"
    icon: "mdi:solar-power"
    
    
  - platform: template
    name: "Solar Panel Output level"
    id: solar_panel_power_output_percentage
    lambda: |-
      float power = id(station_power).state;
      float max_power_rating = 10;  // Replace with your panel's max power rating
      return (power / max_power_rating) * 100;
    update_interval: 5min
    unit_of_measurement: "%"
    icon: "mdi:solar-power"



  - platform: template
    name: "Panel Loss due to Resistance"
    id: power_loss_due_to_resistance
    lambda: |-
      float current = id(station_current).state;
      float shunt_voltage = id(station_shunt_voltage).state;
      return current * shunt_voltage;
    update_interval: 5min
    unit_of_measurement: "W"
    icon: "mdi:flash"



  - platform: pmsx003
    type: PMSX003
    pm_1_0:
      name: "Solar Station Particulate Matter 1"
      id: solar_station_pm_1
    pm_2_5:
      name: "Solar Station Particulate Matter 2.5"
      id: solar_station_pm_2_5
    pm_10_0:
      name: "Solar Station Particulate Matter 10"
      id: solar_station_pm_10

  - platform: ina219
    address: 0x41
    shunt_resistance: 0.1 ohm
    max_voltage: 20.0V
    max_current: 0.56A
    update_interval: 1min
    current:
      name: "Solarpanel Current"
      id: station_current
    power:
      name: "Solarpanel Power"
      id: station_power
    bus_voltage:
      name: "Solarpanel Bus Voltage"
      id: station_bus_voltage
    shunt_voltage:
      name: "Solarpanel Shunt Voltage"
      id: station_shunt_voltage

  - platform: ina219
    address: 0x40
    shunt_resistance: 0.1 ohm
    max_voltage: 4.2V
    max_current: 4.0A
    update_interval: 1min
    current:
      name: "Battery Current"
      id: battery_current
    power:
      name: "Battery Power"
      id: battery_solar_panel_power
    bus_voltage:
      name: "Battery Bus Voltage"
      id: battery_bus_voltage
    shunt_voltage:
      name: "Battery Shunt Voltage"
      id: battery_shunt_voltage

  


switch:
  - platform: gpio
    pin: D3
    id: solar_station_pms5003_power
    
  # Expose an ESP32 restart button to HA
  - platform: restart
    name: "solar station reboot"
    

interval:
  - interval: 300min
    then:
      - switch.turn_on: solar_station_pms5003_power
      - delay: 30s
      - switch.turn_off: solar_station_pms5003_power
      

  - interval: 5min
    then:
      - lambda: |-
          id(total_consumed_charge) += (id(battery_current).state - id(station_current).state) / 12.0;



i2c:
  sda: D6
  scl: D7
  scan: True



globals:
    
  - id: total_consumed_charge
    type: float
    restore_value: no
    initial_value: "0.0"


text_sensor:
  - platform: template
    name: "Battery Health Status"
    id: battery_health_status
    lambda: |-
      float voltage = id(battery_bus_voltage).state;
      float current = id(battery_current).state;
      float temp = id(solar_station_battery_temperature).state;
      std::string status = "Unknown Status";
      std::string tempStatus = "Unknown Temp Status";
      std::string warning = "";

      // Temperature Status
      if (temp <= 0.0) tempStatus = "Extreme Cold";
      else if (temp <= 15.0) tempStatus = "Very Cold";
      else if (temp < 20.0) tempStatus = "Cold";
      else if (temp <= 45.0) tempStatus = "Optimal Temp";
      else if (temp <= 50.0) tempStatus = "Warm";
      else if (temp <= 60.0) tempStatus = "Hot";
      else if (temp <= 70.0) tempStatus = "Very Hot";
      else if (temp <= 80.0) tempStatus = "Dangerously Hot";
      else tempStatus = "Extreme Heat";

      // Voltage & Current Status with Warnings
      if (voltage < 3.3 && current > 0) {
        status = "Early Charging";
        if (temp <= -20.0 || temp >= 50.0) warning = "Temperature Warning: Charging in extreme conditions!";
      } else if (voltage < 3.9 && current > 0.08) {
        status = "Fast Charging";
      } else if (voltage > 3.9 && current > 0) {
        status = "Topping Off";
      } else if (voltage >= 4.2 && current < 0.01 && current > 0) {
        status = "Trickle Charging";
      } else if (voltage >= 4.2 && current == 0) {
        status = "Battery Full";
      } else if (current < 0 && abs(current) < 0.08) {
        status = "Normal Discharge";
      } else if (current < 0 && abs(current) >= 0.08) {
        status = "High Discharge";
      } else if (voltage < 3.5 && current <= 0) {
        status = "Low Battery";
      } else if (voltage < 3.2 && current <= 0) {
        status = "Battery Critical";
      } else if (voltage < 2.5 || temp > 60.0) {
        status = "Damaged";
      } else if ((voltage >= 2.5 && voltage < 3.0) || temp < -20.0) {
        status = "Critical";
      } else if ((voltage >= 3.0 && voltage < 3.4) || (temp >= 50.0 && temp <= 60.0)) {
        status = "Poor";
      } else if ((voltage >= 3.4 && voltage < 3.7) || (temp >= 40.0 && temp < 50.0)) {
        status = "Fair";
      } else if ((voltage >= 3.7 && voltage < 4.0) || (temp >= 30.0 && temp < 40.0)) {
        status = "Good";
      } else if ((voltage >= 4.0 && voltage < 4.1) || (temp >= 25.0 && temp < 30.0)) {
        status = "Very Good";
      } else if ((voltage >= 4.1 && voltage <= 4.2) || (temp >= 20.0 && temp < 25.0)) {
        status = "Excellent";
      } else if (current == 0 && (temp < 20.0 || temp > 25.0)) {
        status = "Idle - Suboptimal Temp";
      } else if (current == 0 && (temp >= 20.0 && temp <= 25.0)) {
        status = "Idle - Optimal Temp";
      } 

      // Health Percentile based on voltage, biased by temperature conditions
      float health_percent = ((voltage - 2.5) / 1.7) * 100.0;
      if (temp < -20.0 || temp > 50.0) health_percent *= 0.9; // Reduce health score by 10% for extreme temperatures

      // Battery Age (Placeholder, adjust as needed)
      int battery_age_months = 12; // Example: 12 months old
      if (battery_age_months > 36) warning += " Battery is older than 3 years. Consider checking its lifespan!";
      
      char formatted_health[10];
      snprintf(formatted_health, sizeof(formatted_health), "%.2f", health_percent);

      return esphome::optional<std::string>(status + " | " + tempStatus + " | Health: " + formatted_health + "% | " + warning);

    update_interval: 5min
    icon: "mdi:heart-pulse"


  
  - platform: template
    name: "Storm Prediction Detail Text"
    lambda: |-
      char buffer[255];
      sprintf(buffer, "Temp: %.1f%%, Humidity: %.1f%%, Solar: %.1f%%, Wind: %.1f%%", 
              id(storm_prediction_detail).state / 100.0 * 30.0, 
              id(storm_prediction_detail).state / 100.0 * 25.0, 
              id(storm_prediction_detail).state / 100.0 * 20.0, 
              id(storm_prediction_detail).state / 100.0 * 20.0);
      return std::string(buffer);




    
  - platform: template
    name: "Solar Panel Status"
    id: solar_panel_status
    lambda: |-
      float power = id(station_power).state;
      
      if (power < 1) {
        return esphome::optional<std::string>("Very Low Output");
      } else if (power >= 1 && power < 3) {
        return esphome::optional<std::string>("Low Output");
      } else if (power >= 3 && power < 5) {
        return esphome::optional<std::string>("Below Moderate Output");
      } else if (power >= 5 && power < 7) {
        return esphome::optional<std::string>("Moderate Output");
      } else if (power >= 7 && power < 8.5) {
        return esphome::optional<std::string>("Above Moderate Output");
      } else if (power >= 8.5 && power < 9.5) {
        return esphome::optional<std::string>("High Output");
      } else if (power >= 9.5 && power < 10) {
        return esphome::optional<std::string>("Optimal Output");
      } else if (power >= 10) {
        return esphome::optional<std::string>("Over Power");
      } else {
        return esphome::optional<std::string>("Unknown Output");
      }
    update_interval: 5min
    icon: "mdi:solar-panel-large"

  - platform: template
    name: "Battery Charging Status"
    id: battery_charging_status
    lambda: |-
      float current = id(battery_current).state;
      
      if (current > 0.0) {
        return esphome::optional<std::string>("Charging");
      } else if (current < 0.0) {
        return esphome::optional<std::string>("Discharging");
      } else {
        return esphome::optional<std::string>("Idle");
      }
    update_interval: 5min
    icon: "mdi:battery-charging"


  - platform: template
    name: "Air Quality Status"
    id: air_quality_status
    lambda: |-
      const float PM2_5 = id(solar_station_pm_2_5).state;

      std::string air_quality;
    
      if (PM2_5 <= 12.0) {
        air_quality = "Good";
      } else if (PM2_5 <= 35.4) {
        air_quality = "Moderate";
      } else if (PM2_5 <= 55.4) {
        air_quality = "Unhealthy for Sensitive Groups";
      } else if (PM2_5 <= 150.4) {
        air_quality = "Unhealthy";
      } else if (PM2_5 <= 250.4) {
        air_quality = "Very Unhealthy";
      } else {
        air_quality = "Hazardous";
      }
    
      return esphome::optional<std::string>(air_quality);
    update_interval: 300min
    icon: "mdi:air-filter"
  

light:
  - platform: neopixelbus
    variant: WS2812X
    pin: D8
    num_leds: 6
    type: GRB
    name: "SolarStationLight"
    id: Solar_Station_Indicator_Light
    default_transition_length: 0s  # No transition time for the initial state
    restore_mode: ALWAYS_OFF  # Ensures light is always on after a power cycle
    effects:
      - addressable_lambda:
          name: "Air Quality Status"
          update_interval: 30min
          lambda: |-
            using namespace esphome;
            float pm25_value = id(solar_station_pm_2_5).state;
            
            // Turn off all LEDs initially
            for (int i = 0; i < 15; i++) {
                it[i] = Color(0, 0, 0);
            }

            if (pm25_value <= 50.0) {
                int green_led_count = round(7 * pm25_value / 6.0);
                for (int i = 0; i < green_led_count; i++) {
                    it[i] = Color(0, 255, 0);  // Green for Good air quality
                }
            } else if (pm25_value <= 100.0) {
                for (int i = 0; i < 7; i++) {
                    it[i] = Color(0, 255, 0);  // All Green LEDs ON
                }
                int yellow_led_count = round(5 * (pm25_value - 6.0) / 6.0);
                for (int i = 7; i < 7 + yellow_led_count; i++) {
                    it[i] = Color(255, 255, 0);  // Yellow for Moderate air quality
                }
            } else {
                for (int i = 0; i < 12; i++) {
                    if (i < 7) {
                        it[i] = Color(0, 255, 0);  // All Green LEDs ON
                    } else {
                        it[i] = Color(255, 255, 0);  // All Yellow LEDs ON
                    }
                }
                int red_led_count = round(3 * (pm25_value - 100.0) / 50.0);
                for (int i = 12; i < 12 + red_led_count; i++) {
                    it[i] = Color(255, 0, 0);  // Red for Poor air quality
                }
            }
            
      - addressable_lambda:
          name: "Battery charge Status"
          update_interval: 300min
          lambda: |-
           using namespace esphome;
           float battery_percentage = id(battery_remaining_percentage).state;

           // Turn off all LEDs initially
           for (int i = 0; i < 6; i++) {
           it[i] = Color(0, 0, 0);
           }

           // Set the color of each LED based on the predefined states
           if (battery_percentage <= 16.67) {
           it[0] = Color(255, 0, 0);  // Red for the first LED
           } else if (battery_percentage <= 33.34) {
           it[0] = Color(255, 0, 0);  // Red for the first LED
           it[1] = Color(255, 0, 0);  // Red for the second LED
           } else if (battery_percentage <= 50.01) {
           it[0] = Color(255, 0, 0);  // Red for the first LED
           it[1] = Color(255, 0, 0);  // Red for the second LED
           it[2] = Color(255, 255, 0);  // Yellow for the third LED
           } else if (battery_percentage <= 66.68) {
           it[0] = Color(255, 0, 0);  // Red for the first LED
           it[1] = Color(255, 0, 0);  // Red for the second LED
           it[2] = Color(255, 255, 0);  // Yellow for the third LED
           it[3] = Color(255, 255, 0);  // Yellow for the fourth LED
           } else if (battery_percentage <= 83.35) {
           it[0] = Color(255, 0, 0);  // Red for the first LED
           it[1] = Color(255, 0, 0);  // Red for the second LED
           it[2] = Color(255, 255, 0);  // Yellow for the third LED
           it[3] = Color(255, 255, 0);  // Yellow for the fourth LED
           it[4] = Color(0, 255, 0);  // Green for the fifth LED
           } else {
           it[0] = Color(255, 0, 0);  // Red for the first LED
           it[1] = Color(255, 0, 0);  // Red for the second LED
           it[2] = Color(255, 255, 0);  // Yellow for the third LED
           it[3] = Color(255, 255, 0);  // Yellow for the fourth LED
           it[4] = Color(0, 255, 0);  // Green for the fifth LED
           it[5] = Color(0, 255, 0);  // Green for the sixth LED
           }